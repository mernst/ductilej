TypelessJ TODO
--------------

Open issues;
- How to handle switch for enums?
- How to handle assignment operators (++, +=, etc.)?

Detyper
- Handle all java.lang classes in static detection
- Handle array creation (new type[expr] -> new type[(Integer)expr])
- Handle switch statements switch (expr) -> switch ((Integer)expr)
- I think we don't need to annotate anonymous inner classes, confirm this
- Implement signature mangling
- Need to handle static imports (hopefully we won't need to differentiate
between members and methods)
- Extract main() detection into ASTUtil, make it correct
- Record original type information when transforming JCVariableDecl, somehow
pass that along to all runtime methods so that they can provide better feedback
- Record original type information when transforming JCMethodDecl and store
that in annotations preserved at runtime for use by RT.invoke()

Runtime
- Implement RT.compare()
- Finish implementation of RT.op()
- Make use of type information everywhere possible to validate types before
calling typed library methods (transformed methods as well)
