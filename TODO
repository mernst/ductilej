TypelessJ TODO
--------------

Open issues;
- How to handle switch (can't just switch ((Integer)exp) because of enums)?
-- Transform into a for{} and some if()s?
- How to handle post-fix assignment operators (++, +=, etc.)?
-- Implement mutable boxes, ensure that all "initially primitive" variables
reference mutable boxes and preserve mutable boxes through operations
- What math ops are legal for Character (+ and -, but * and /?)

Detyper
- Handle field dereference (foo.bar)
- Handle array creation (new type[expr] -> new type[(Integer)expr])
- Handle array cell assignment (foo[bar] = baz)
- Insert cast to proper return type for overridden library methods
- I think we don't need to annotate anonymous inner classes, confirm this
- Implement signature mangling
- Need to handle static imports (hopefully we won't need to differentiate
between members and methods)
- Extract main() detection into ASTUtil, make it correct
- Record original type information when transforming JCVariableDecl, somehow
pass that along to all runtime methods so that they can provide better feedback
- Record original type information when transforming JCMethodDecl and store
that in annotations preserved at runtime for use by RT.invoke()

Runtime
- Finish implementation of RT.unop(), RT.binop()
- Make use of type information everywhere possible to validate types before
calling typed library methods (transformed methods as well)
